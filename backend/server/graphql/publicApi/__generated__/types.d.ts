/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  PlaceAutocompleteStatus: "INVALID_REQUEST" | "OK" | "OVER_QUERY_LIMIT" | "REQUEST_DENIED" | "UNKNOWN_ERROR" | "ZERO_RESULTS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
}

export interface NexusGenObjects {
  CreateSessionType: { // root type
    token: string; // String!
  }
  Mutation: {};
  PlaceAutocomplete: { // root type
    error_message?: string | null; // String
    info_messages?: string[] | null; // [String!]
    predictions: NexusGenRootTypes['PlaceAutocompletePrediction'][]; // [PlaceAutocompletePrediction!]!
    status: NexusGenEnums['PlaceAutocompleteStatus']; // PlaceAutocompleteStatus!
  }
  PlaceAutocompletePrediction: { // root type
    description: string; // String!
    matched_substrings: NexusGenRootTypes['PlaceAutocompletePredictionMatchedSubstring'][]; // [PlaceAutocompletePredictionMatchedSubstring!]!
    place_id: string; // String!
    reference: string; // String!
    structured_formatting: NexusGenRootTypes['PlaceAutocompletePredictionStructuredFormatting']; // PlaceAutocompletePredictionStructuredFormatting!
    terms: NexusGenRootTypes['PlaceAutocompletePredictionTerm'][]; // [PlaceAutocompletePredictionTerm!]!
    types: string[]; // [String!]!
  }
  PlaceAutocompletePredictionMatchedSubstring: { // root type
    length: number; // Int!
    offset: number; // Int!
  }
  PlaceAutocompletePredictionStructuredFormatting: { // root type
    main_text: string; // String!
    main_text_matched_substrings: NexusGenRootTypes['PlaceAutocompletePredictionMatchedSubstring'][]; // [PlaceAutocompletePredictionMatchedSubstring!]!
    secondary_text: string; // String!
  }
  PlaceAutocompletePredictionTerm: { // root type
    offset: number; // Int!
    value: string; // String!
  }
  Prefecture: { // root type
    id: NexusGenScalars['BigInt']; // BigInt!
    name: string; // String!
  }
  Query: {};
  Region: { // root type
    id: NexusGenScalars['BigInt']; // BigInt!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CreateSessionType: { // field return type
    token: string; // String!
  }
  Mutation: { // field return type
    createSession: NexusGenRootTypes['CreateSessionType']; // CreateSessionType!
  }
  PlaceAutocomplete: { // field return type
    error_message: string | null; // String
    info_messages: string[] | null; // [String!]
    predictions: NexusGenRootTypes['PlaceAutocompletePrediction'][]; // [PlaceAutocompletePrediction!]!
    status: NexusGenEnums['PlaceAutocompleteStatus']; // PlaceAutocompleteStatus!
  }
  PlaceAutocompletePrediction: { // field return type
    description: string; // String!
    matched_substrings: NexusGenRootTypes['PlaceAutocompletePredictionMatchedSubstring'][]; // [PlaceAutocompletePredictionMatchedSubstring!]!
    place_id: string; // String!
    reference: string; // String!
    structured_formatting: NexusGenRootTypes['PlaceAutocompletePredictionStructuredFormatting']; // PlaceAutocompletePredictionStructuredFormatting!
    terms: NexusGenRootTypes['PlaceAutocompletePredictionTerm'][]; // [PlaceAutocompletePredictionTerm!]!
    types: string[]; // [String!]!
  }
  PlaceAutocompletePredictionMatchedSubstring: { // field return type
    length: number; // Int!
    offset: number; // Int!
  }
  PlaceAutocompletePredictionStructuredFormatting: { // field return type
    main_text: string; // String!
    main_text_matched_substrings: NexusGenRootTypes['PlaceAutocompletePredictionMatchedSubstring'][]; // [PlaceAutocompletePredictionMatchedSubstring!]!
    secondary_text: string; // String!
  }
  PlaceAutocompletePredictionTerm: { // field return type
    offset: number; // Int!
    value: string; // String!
  }
  Prefecture: { // field return type
    id: NexusGenScalars['BigInt']; // BigInt!
    name: string; // String!
    region: NexusGenRootTypes['Region']; // Region!
  }
  Query: { // field return type
    placeAutocomplete: NexusGenRootTypes['PlaceAutocomplete']; // PlaceAutocomplete!
    prefectures: NexusGenRootTypes['Prefecture'][]; // [Prefecture!]!
  }
  Region: { // field return type
    id: NexusGenScalars['BigInt']; // BigInt!
    name: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  CreateSessionType: { // field return type name
    token: 'String'
  }
  Mutation: { // field return type name
    createSession: 'CreateSessionType'
  }
  PlaceAutocomplete: { // field return type name
    error_message: 'String'
    info_messages: 'String'
    predictions: 'PlaceAutocompletePrediction'
    status: 'PlaceAutocompleteStatus'
  }
  PlaceAutocompletePrediction: { // field return type name
    description: 'String'
    matched_substrings: 'PlaceAutocompletePredictionMatchedSubstring'
    place_id: 'String'
    reference: 'String'
    structured_formatting: 'PlaceAutocompletePredictionStructuredFormatting'
    terms: 'PlaceAutocompletePredictionTerm'
    types: 'String'
  }
  PlaceAutocompletePredictionMatchedSubstring: { // field return type name
    length: 'Int'
    offset: 'Int'
  }
  PlaceAutocompletePredictionStructuredFormatting: { // field return type name
    main_text: 'String'
    main_text_matched_substrings: 'PlaceAutocompletePredictionMatchedSubstring'
    secondary_text: 'String'
  }
  PlaceAutocompletePredictionTerm: { // field return type name
    offset: 'Int'
    value: 'String'
  }
  Prefecture: { // field return type name
    id: 'BigInt'
    name: 'String'
    region: 'Region'
  }
  Query: { // field return type name
    placeAutocomplete: 'PlaceAutocomplete'
    prefectures: 'Prefecture'
  }
  Region: { // field return type name
    id: 'BigInt'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createSession: { // args
      email: string; // String!
      password: string; // String!
    }
  }
  Query: {
    placeAutocomplete: { // args
      searchText: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}